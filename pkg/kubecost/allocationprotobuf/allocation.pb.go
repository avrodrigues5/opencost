// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: allocationprotobuf/allocation.proto

//option java_multiple_files = true;
//option java_package = "allocation";
//option java_outer_classname = "AllocationProto";

package allocation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//TO-DO: Skipping format (JSON/CSV) and only having json response for now
//TO-DO: Work on default True for reconcile, shareTenancyCost
type AllocationSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Window:
	//	*AllocationSummaryRequest_AbsWindow
	//	*AllocationSummaryRequest_RelWindow
	Window     isAllocationSummaryRequest_Window `protobuf_oneof:"window"`
	Aggregate  string                            `protobuf:"bytes,3,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Accumulate bool                              `protobuf:"varint,4,opt,name=accumulate,proto3" json:"accumulate,omitempty"`
	Filter     *FilterSelection                  `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Shared     *SharedSelection                  `protobuf:"bytes,6,opt,name=shared,proto3" json:"shared,omitempty"`
	Idle       *IdleSelection                    `protobuf:"bytes,7,opt,name=idle,proto3" json:"idle,omitempty"`
	Reconcile  bool                              `protobuf:"varint,8,opt,name=reconcile,proto3" json:"reconcile,omitempty"`
	External   bool                              `protobuf:"varint,9,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *AllocationSummaryRequest) Reset() {
	*x = AllocationSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryRequest) ProtoMessage() {}

func (x *AllocationSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryRequest.ProtoReflect.Descriptor instead.
func (*AllocationSummaryRequest) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{0}
}

func (m *AllocationSummaryRequest) GetWindow() isAllocationSummaryRequest_Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (x *AllocationSummaryRequest) GetAbsWindow() *AbsoluteWindow {
	if x, ok := x.GetWindow().(*AllocationSummaryRequest_AbsWindow); ok {
		return x.AbsWindow
	}
	return nil
}

func (x *AllocationSummaryRequest) GetRelWindow() *RelativeWindow {
	if x, ok := x.GetWindow().(*AllocationSummaryRequest_RelWindow); ok {
		return x.RelWindow
	}
	return nil
}

func (x *AllocationSummaryRequest) GetAggregate() string {
	if x != nil {
		return x.Aggregate
	}
	return ""
}

func (x *AllocationSummaryRequest) GetAccumulate() bool {
	if x != nil {
		return x.Accumulate
	}
	return false
}

func (x *AllocationSummaryRequest) GetFilter() *FilterSelection {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AllocationSummaryRequest) GetShared() *SharedSelection {
	if x != nil {
		return x.Shared
	}
	return nil
}

func (x *AllocationSummaryRequest) GetIdle() *IdleSelection {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (x *AllocationSummaryRequest) GetReconcile() bool {
	if x != nil {
		return x.Reconcile
	}
	return false
}

func (x *AllocationSummaryRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

type isAllocationSummaryRequest_Window interface {
	isAllocationSummaryRequest_Window()
}

type AllocationSummaryRequest_AbsWindow struct {
	AbsWindow *AbsoluteWindow `protobuf:"bytes,1,opt,name=absWindow,proto3,oneof"`
}

type AllocationSummaryRequest_RelWindow struct {
	RelWindow *RelativeWindow `protobuf:"bytes,2,opt,name=relWindow,proto3,oneof"`
}

func (*AllocationSummaryRequest_AbsWindow) isAllocationSummaryRequest_Window() {}

func (*AllocationSummaryRequest_RelWindow) isAllocationSummaryRequest_Window() {}

type AbsoluteWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AbsoluteWindow) Reset() {
	*x = AbsoluteWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteWindow) ProtoMessage() {}

func (x *AbsoluteWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteWindow.ProtoReflect.Descriptor instead.
func (*AbsoluteWindow) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{1}
}

func (x *AbsoluteWindow) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AbsoluteWindow) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type RelativeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame string `protobuf:"bytes,1,opt,name=timeFrame,proto3" json:"timeFrame,omitempty"`
}

func (x *RelativeWindow) Reset() {
	*x = RelativeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeWindow) ProtoMessage() {}

func (x *RelativeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeWindow.ProtoReflect.Descriptor instead.
func (*RelativeWindow) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{2}
}

func (x *RelativeWindow) GetTimeFrame() string {
	if x != nil {
		return x.TimeFrame
	}
	return ""
}

//only v1 support first
type FilterSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterClusters        string `protobuf:"bytes,1,opt,name=filterClusters,proto3" json:"filterClusters,omitempty"`
	FilterNodes           string `protobuf:"bytes,2,opt,name=filterNodes,proto3" json:"filterNodes,omitempty"`
	FilterNamespaces      string `protobuf:"bytes,3,opt,name=filterNamespaces,proto3" json:"filterNamespaces,omitempty"`
	FilterControllerKinds string `protobuf:"bytes,4,opt,name=filterControllerKinds,proto3" json:"filterControllerKinds,omitempty"`
	FilterController      string `protobuf:"bytes,5,opt,name=filterController,proto3" json:"filterController,omitempty"`
	FilterPods            string `protobuf:"bytes,6,opt,name=filterPods,proto3" json:"filterPods,omitempty"`
	FilterAnnotations     string `protobuf:"bytes,7,opt,name=filterAnnotations,proto3" json:"filterAnnotations,omitempty"`
	FilterLabels          string `protobuf:"bytes,8,opt,name=filterLabels,proto3" json:"filterLabels,omitempty"`
	FilterServices        string `protobuf:"bytes,9,opt,name=filterServices,proto3" json:"filterServices,omitempty"`
}

func (x *FilterSelection) Reset() {
	*x = FilterSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSelection) ProtoMessage() {}

func (x *FilterSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSelection.ProtoReflect.Descriptor instead.
func (*FilterSelection) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{3}
}

func (x *FilterSelection) GetFilterClusters() string {
	if x != nil {
		return x.FilterClusters
	}
	return ""
}

func (x *FilterSelection) GetFilterNodes() string {
	if x != nil {
		return x.FilterNodes
	}
	return ""
}

func (x *FilterSelection) GetFilterNamespaces() string {
	if x != nil {
		return x.FilterNamespaces
	}
	return ""
}

func (x *FilterSelection) GetFilterControllerKinds() string {
	if x != nil {
		return x.FilterControllerKinds
	}
	return ""
}

func (x *FilterSelection) GetFilterController() string {
	if x != nil {
		return x.FilterController
	}
	return ""
}

func (x *FilterSelection) GetFilterPods() string {
	if x != nil {
		return x.FilterPods
	}
	return ""
}

func (x *FilterSelection) GetFilterAnnotations() string {
	if x != nil {
		return x.FilterAnnotations
	}
	return ""
}

func (x *FilterSelection) GetFilterLabels() string {
	if x != nil {
		return x.FilterLabels
	}
	return ""
}

func (x *FilterSelection) GetFilterServices() string {
	if x != nil {
		return x.FilterServices
	}
	return ""
}

//Different Idle selection it’s own Protobuf
type IdleSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idle       bool `protobuf:"varint,1,opt,name=idle,proto3" json:"idle,omitempty"`
	ShareIdle  bool `protobuf:"varint,2,opt,name=shareIdle,proto3" json:"shareIdle,omitempty"`
	SplitIdle  bool `protobuf:"varint,3,opt,name=splitIdle,proto3" json:"splitIdle,omitempty"`
	IdleByNode bool `protobuf:"varint,4,opt,name=idleByNode,proto3" json:"idleByNode,omitempty"`
}

func (x *IdleSelection) Reset() {
	*x = IdleSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleSelection) ProtoMessage() {}

func (x *IdleSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleSelection.ProtoReflect.Descriptor instead.
func (*IdleSelection) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{4}
}

func (x *IdleSelection) GetIdle() bool {
	if x != nil {
		return x.Idle
	}
	return false
}

func (x *IdleSelection) GetShareIdle() bool {
	if x != nil {
		return x.ShareIdle
	}
	return false
}

func (x *IdleSelection) GetSplitIdle() bool {
	if x != nil {
		return x.SplitIdle
	}
	return false
}

func (x *IdleSelection) GetIdleByNode() bool {
	if x != nil {
		return x.IdleByNode
	}
	return false
}

//Different Idle selection it’s own Protobuf
type SharedSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareTenancyCosts bool    `protobuf:"varint,1,opt,name=shareTenancyCosts,proto3" json:"shareTenancyCosts,omitempty"`
	ShareNamespaces   string  `protobuf:"bytes,2,opt,name=shareNamespaces,proto3" json:"shareNamespaces,omitempty"`
	ShareLabels       string  `protobuf:"bytes,3,opt,name=shareLabels,proto3" json:"shareLabels,omitempty"`
	ShareCost         float64 `protobuf:"fixed64,4,opt,name=shareCost,proto3" json:"shareCost,omitempty"`
	ShareSplit        string  `protobuf:"bytes,5,opt,name=shareSplit,proto3" json:"shareSplit,omitempty"`
}

func (x *SharedSelection) Reset() {
	*x = SharedSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedSelection) ProtoMessage() {}

func (x *SharedSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedSelection.ProtoReflect.Descriptor instead.
func (*SharedSelection) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{5}
}

func (x *SharedSelection) GetShareTenancyCosts() bool {
	if x != nil {
		return x.ShareTenancyCosts
	}
	return false
}

func (x *SharedSelection) GetShareNamespaces() string {
	if x != nil {
		return x.ShareNamespaces
	}
	return ""
}

func (x *SharedSelection) GetShareLabels() string {
	if x != nil {
		return x.ShareLabels
	}
	return ""
}

func (x *SharedSelection) GetShareCost() float64 {
	if x != nil {
		return x.ShareCost
	}
	return 0
}

func (x *SharedSelection) GetShareSplit() string {
	if x != nil {
		return x.ShareSplit
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AllocationSet `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetData() []*AllocationSet {
	if x != nil {
		return x.Data
	}
	return nil
}

//We really dont need the map per the json response of GET call model/allocation/summary
//While creating stream of data sending repeated instead of Map like the
type AllocationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map<string, AllocationItem> allocations = 1;
	Allocations []*AllocationItem `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Window      *Window           `protobuf:"bytes,2,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *AllocationSet) Reset() {
	*x = AllocationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSet) ProtoMessage() {}

func (x *AllocationSet) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSet.ProtoReflect.Descriptor instead.
func (*AllocationSet) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{7}
}

func (x *AllocationSet) GetAllocations() []*AllocationItem {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *AllocationSet) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

// Convert to another ProtoBuf Message with google.protobuf.Timestamp type
type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{8}
}

func (x *Window) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Window) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type AllocationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *AllocationItem `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AllocationDetail) Reset() {
	*x = AllocationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationDetail) ProtoMessage() {}

func (x *AllocationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationDetail.ProtoReflect.Descriptor instead.
func (*AllocationDetail) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{9}
}

func (x *AllocationDetail) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AllocationDetail) GetValue() *AllocationItem {
	if x != nil {
		return x.Value
	}
	return nil
}

// To do start and end should be google.protobuf.Timestamp protobuf type
type AllocationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start                 string  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                   string  `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Name                  string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CpuCoreRequestAverage float64 `protobuf:"fixed64,4,opt,name=cpuCoreRequestAverage,proto3" json:"cpuCoreRequestAverage,omitempty"`
	CpuCoreUsageAverage   float64 `protobuf:"fixed64,5,opt,name=cpuCoreUsageAverage,proto3" json:"cpuCoreUsageAverage,omitempty"`
	CpuCost               float64 `protobuf:"fixed64,6,opt,name=cpuCost,proto3" json:"cpuCost,omitempty"`
	GpuCost               float64 `protobuf:"fixed64,7,opt,name=gpuCost,proto3" json:"gpuCost,omitempty"`
	NetworkCost           float64 `protobuf:"fixed64,8,opt,name=networkCost,proto3" json:"networkCost,omitempty"`
	LoadBalancerCost      float64 `protobuf:"fixed64,9,opt,name=loadBalancerCost,proto3" json:"loadBalancerCost,omitempty"`
	PvCost                float64 `protobuf:"fixed64,10,opt,name=pvCost,proto3" json:"pvCost,omitempty"`
	RamByteRequestAverage float64 `protobuf:"fixed64,11,opt,name=ramByteRequestAverage,proto3" json:"ramByteRequestAverage,omitempty"`
	RamByteUsageAverage   float64 `protobuf:"fixed64,12,opt,name=ramByteUsageAverage,proto3" json:"ramByteUsageAverage,omitempty"`
	RamCost               float64 `protobuf:"fixed64,13,opt,name=ramCost,proto3" json:"ramCost,omitempty"`
	SharedCost            float64 `protobuf:"fixed64,14,opt,name=sharedCost,proto3" json:"sharedCost,omitempty"`
	ExternalCost          float64 `protobuf:"fixed64,15,opt,name=externalCost,proto3" json:"externalCost,omitempty"`
}

func (x *AllocationItem) Reset() {
	*x = AllocationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocationprotobuf_allocation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationItem) ProtoMessage() {}

func (x *AllocationItem) ProtoReflect() protoreflect.Message {
	mi := &file_allocationprotobuf_allocation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationItem.ProtoReflect.Descriptor instead.
func (*AllocationItem) Descriptor() ([]byte, []int) {
	return file_allocationprotobuf_allocation_proto_rawDescGZIP(), []int{10}
}

func (x *AllocationItem) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AllocationItem) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *AllocationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllocationItem) GetCpuCoreRequestAverage() float64 {
	if x != nil {
		return x.CpuCoreRequestAverage
	}
	return 0
}

func (x *AllocationItem) GetCpuCoreUsageAverage() float64 {
	if x != nil {
		return x.CpuCoreUsageAverage
	}
	return 0
}

func (x *AllocationItem) GetCpuCost() float64 {
	if x != nil {
		return x.CpuCost
	}
	return 0
}

func (x *AllocationItem) GetGpuCost() float64 {
	if x != nil {
		return x.GpuCost
	}
	return 0
}

func (x *AllocationItem) GetNetworkCost() float64 {
	if x != nil {
		return x.NetworkCost
	}
	return 0
}

func (x *AllocationItem) GetLoadBalancerCost() float64 {
	if x != nil {
		return x.LoadBalancerCost
	}
	return 0
}

func (x *AllocationItem) GetPvCost() float64 {
	if x != nil {
		return x.PvCost
	}
	return 0
}

func (x *AllocationItem) GetRamByteRequestAverage() float64 {
	if x != nil {
		return x.RamByteRequestAverage
	}
	return 0
}

func (x *AllocationItem) GetRamByteUsageAverage() float64 {
	if x != nil {
		return x.RamByteUsageAverage
	}
	return 0
}

func (x *AllocationItem) GetRamCost() float64 {
	if x != nil {
		return x.RamCost
	}
	return 0
}

func (x *AllocationItem) GetSharedCost() float64 {
	if x != nil {
		return x.SharedCost
	}
	return 0
}

func (x *AllocationItem) GetExternalCost() float64 {
	if x != nil {
		return x.ExternalCost
	}
	return 0
}

var File_allocationprotobuf_allocation_proto protoreflect.FileDescriptor

var file_allocationprotobuf_allocation_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xad, 0x03, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x09, 0x61, 0x62, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x62, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65,
	0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x22, 0x38, 0x0a, 0x0e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x0e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x64, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x64,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x39,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x0d, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x22, 0x30, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x56, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x94,
	0x04, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x76, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x76, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6d, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x32, 0xca, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x55,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x73, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x75, 0x66, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_allocationprotobuf_allocation_proto_rawDescOnce sync.Once
	file_allocationprotobuf_allocation_proto_rawDescData = file_allocationprotobuf_allocation_proto_rawDesc
)

func file_allocationprotobuf_allocation_proto_rawDescGZIP() []byte {
	file_allocationprotobuf_allocation_proto_rawDescOnce.Do(func() {
		file_allocationprotobuf_allocation_proto_rawDescData = protoimpl.X.CompressGZIP(file_allocationprotobuf_allocation_proto_rawDescData)
	})
	return file_allocationprotobuf_allocation_proto_rawDescData
}

var file_allocationprotobuf_allocation_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_allocationprotobuf_allocation_proto_goTypes = []interface{}{
	(*AllocationSummaryRequest)(nil), // 0: allocation.AllocationSummaryRequest
	(*AbsoluteWindow)(nil),           // 1: allocation.AbsoluteWindow
	(*RelativeWindow)(nil),           // 2: allocation.RelativeWindow
	(*FilterSelection)(nil),          // 3: allocation.FilterSelection
	(*IdleSelection)(nil),            // 4: allocation.IdleSelection
	(*SharedSelection)(nil),          // 5: allocation.SharedSelection
	(*Response)(nil),                 // 6: allocation.Response
	(*AllocationSet)(nil),            // 7: allocation.AllocationSet
	(*Window)(nil),                   // 8: allocation.Window
	(*AllocationDetail)(nil),         // 9: allocation.AllocationDetail
	(*AllocationItem)(nil),           // 10: allocation.AllocationItem
}
var file_allocationprotobuf_allocation_proto_depIdxs = []int32{
	1,  // 0: allocation.AllocationSummaryRequest.absWindow:type_name -> allocation.AbsoluteWindow
	2,  // 1: allocation.AllocationSummaryRequest.relWindow:type_name -> allocation.RelativeWindow
	3,  // 2: allocation.AllocationSummaryRequest.filter:type_name -> allocation.FilterSelection
	5,  // 3: allocation.AllocationSummaryRequest.shared:type_name -> allocation.SharedSelection
	4,  // 4: allocation.AllocationSummaryRequest.idle:type_name -> allocation.IdleSelection
	7,  // 5: allocation.Response.data:type_name -> allocation.AllocationSet
	10, // 6: allocation.AllocationSet.allocations:type_name -> allocation.AllocationItem
	8,  // 7: allocation.AllocationSet.window:type_name -> allocation.Window
	10, // 8: allocation.AllocationDetail.value:type_name -> allocation.AllocationItem
	0,  // 9: allocation.AllocationRouteGuide.GetAllocationResponse:input_type -> allocation.AllocationSummaryRequest
	0,  // 10: allocation.AllocationRouteGuide.GetAllocationSummary:input_type -> allocation.AllocationSummaryRequest
	6,  // 11: allocation.AllocationRouteGuide.GetAllocationResponse:output_type -> allocation.Response
	7,  // 12: allocation.AllocationRouteGuide.GetAllocationSummary:output_type -> allocation.AllocationSet
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_allocationprotobuf_allocation_proto_init() }
func file_allocationprotobuf_allocation_proto_init() {
	if File_allocationprotobuf_allocation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_allocationprotobuf_allocation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdleSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocationprotobuf_allocation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_allocationprotobuf_allocation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AllocationSummaryRequest_AbsWindow)(nil),
		(*AllocationSummaryRequest_RelWindow)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_allocationprotobuf_allocation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_allocationprotobuf_allocation_proto_goTypes,
		DependencyIndexes: file_allocationprotobuf_allocation_proto_depIdxs,
		MessageInfos:      file_allocationprotobuf_allocation_proto_msgTypes,
	}.Build()
	File_allocationprotobuf_allocation_proto = out.File
	file_allocationprotobuf_allocation_proto_rawDesc = nil
	file_allocationprotobuf_allocation_proto_goTypes = nil
	file_allocationprotobuf_allocation_proto_depIdxs = nil
}
