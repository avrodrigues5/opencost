// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: allocationprotobuf/allocation.proto

package allocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllocationRouteGuideClient is the client API for AllocationRouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocationRouteGuideClient interface {
	GetAllocationResponse(ctx context.Context, in *AllocationSummaryRequest, opts ...grpc.CallOption) (*Response, error)
	// Obtains the Features available within the given AllocationSummaryRequest.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the AllocationSummaryResponse may cover a large area and contain a
	// huge number of response object.
	GetAllocationSummary(ctx context.Context, in *AllocationSummaryRequest, opts ...grpc.CallOption) (AllocationRouteGuide_GetAllocationSummaryClient, error)
}

type allocationRouteGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocationRouteGuideClient(cc grpc.ClientConnInterface) AllocationRouteGuideClient {
	return &allocationRouteGuideClient{cc}
}

func (c *allocationRouteGuideClient) GetAllocationResponse(ctx context.Context, in *AllocationSummaryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/allocation.AllocationRouteGuide/GetAllocationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationRouteGuideClient) GetAllocationSummary(ctx context.Context, in *AllocationSummaryRequest, opts ...grpc.CallOption) (AllocationRouteGuide_GetAllocationSummaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &AllocationRouteGuide_ServiceDesc.Streams[0], "/allocation.AllocationRouteGuide/GetAllocationSummary", opts...)
	if err != nil {
		return nil, err
	}
	x := &allocationRouteGuideGetAllocationSummaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AllocationRouteGuide_GetAllocationSummaryClient interface {
	Recv() (*AllocationSet, error)
	grpc.ClientStream
}

type allocationRouteGuideGetAllocationSummaryClient struct {
	grpc.ClientStream
}

func (x *allocationRouteGuideGetAllocationSummaryClient) Recv() (*AllocationSet, error) {
	m := new(AllocationSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AllocationRouteGuideServer is the server API for AllocationRouteGuide service.
// All implementations must embed UnimplementedAllocationRouteGuideServer
// for forward compatibility
type AllocationRouteGuideServer interface {
	GetAllocationResponse(context.Context, *AllocationSummaryRequest) (*Response, error)
	// Obtains the Features available within the given AllocationSummaryRequest.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the AllocationSummaryResponse may cover a large area and contain a
	// huge number of response object.
	GetAllocationSummary(*AllocationSummaryRequest, AllocationRouteGuide_GetAllocationSummaryServer) error
	mustEmbedUnimplementedAllocationRouteGuideServer()
}

// UnimplementedAllocationRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedAllocationRouteGuideServer struct {
}

func (UnimplementedAllocationRouteGuideServer) GetAllocationResponse(context.Context, *AllocationSummaryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocationResponse not implemented")
}
func (UnimplementedAllocationRouteGuideServer) GetAllocationSummary(*AllocationSummaryRequest, AllocationRouteGuide_GetAllocationSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllocationSummary not implemented")
}
func (UnimplementedAllocationRouteGuideServer) mustEmbedUnimplementedAllocationRouteGuideServer() {}

// UnsafeAllocationRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocationRouteGuideServer will
// result in compilation errors.
type UnsafeAllocationRouteGuideServer interface {
	mustEmbedUnimplementedAllocationRouteGuideServer()
}

func RegisterAllocationRouteGuideServer(s grpc.ServiceRegistrar, srv AllocationRouteGuideServer) {
	s.RegisterService(&AllocationRouteGuide_ServiceDesc, srv)
}

func _AllocationRouteGuide_GetAllocationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationRouteGuideServer).GetAllocationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allocation.AllocationRouteGuide/GetAllocationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationRouteGuideServer).GetAllocationResponse(ctx, req.(*AllocationSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationRouteGuide_GetAllocationSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllocationSummaryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AllocationRouteGuideServer).GetAllocationSummary(m, &allocationRouteGuideGetAllocationSummaryServer{stream})
}

type AllocationRouteGuide_GetAllocationSummaryServer interface {
	Send(*AllocationSet) error
	grpc.ServerStream
}

type allocationRouteGuideGetAllocationSummaryServer struct {
	grpc.ServerStream
}

func (x *allocationRouteGuideGetAllocationSummaryServer) Send(m *AllocationSet) error {
	return x.ServerStream.SendMsg(m)
}

// AllocationRouteGuide_ServiceDesc is the grpc.ServiceDesc for AllocationRouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllocationRouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.AllocationRouteGuide",
	HandlerType: (*AllocationRouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllocationResponse",
			Handler:    _AllocationRouteGuide_GetAllocationResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllocationSummary",
			Handler:       _AllocationRouteGuide_GetAllocationSummary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "allocationprotobuf/allocation.proto",
}
