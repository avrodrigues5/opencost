// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: allocation/allocationsummary.proto

// Update the version for breaking changes to the API.

package allocationsummary

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An Enum for aggregate by selection.
type AggrgateType int32

const (
	AggrgateType_AGGREGATE_TYPE_UNSPECIFIED     AggrgateType = 0
	AggrgateType_AGGREGATE_TYPE_CLUSTER         AggrgateType = 1
	AggrgateType_AGGREGATE_TYPE_CONTAINER       AggrgateType = 2
	AggrgateType_AGGREGATE_TYPE_CONTROLLER      AggrgateType = 3
	AggrgateType_AGGREGATE_TYPE_CONTROLLER_KIND AggrgateType = 4
	AggrgateType_AGGREGATE_TYPE_DAEMONSET       AggrgateType = 5
	AggrgateType_AGGREGATE_TYPE_DEPARTMENT      AggrgateType = 6
	AggrgateType_AGGREGATE_TYPE_ENVIRONMENT     AggrgateType = 7
	AggrgateType_AGGREGATE_TYPE_JOB             AggrgateType = 8
	AggrgateType_AGGREGATE_TYPE_NAMESPACE       AggrgateType = 9
	AggrgateType_AGGREGATE_TYPE_NODE            AggrgateType = 10
	AggrgateType_AGGREGATE_TYPE_OWNER           AggrgateType = 11
	AggrgateType_AGGREGATE_TYPE_POD             AggrgateType = 12
	AggrgateType_AGGREGATE_TYPE_PRODUCT         AggrgateType = 13
	AggrgateType_AGGREGATE_TYPE_SERVICE         AggrgateType = 14
	AggrgateType_AGGREGATE_TYPE_STATEFULSET     AggrgateType = 15
	AggrgateType_AGGREGATE_TYPE_TEAM            AggrgateType = 16
)

// Enum value maps for AggrgateType.
var (
	AggrgateType_name = map[int32]string{
		0:  "AGGREGATE_TYPE_UNSPECIFIED",
		1:  "AGGREGATE_TYPE_CLUSTER",
		2:  "AGGREGATE_TYPE_CONTAINER",
		3:  "AGGREGATE_TYPE_CONTROLLER",
		4:  "AGGREGATE_TYPE_CONTROLLER_KIND",
		5:  "AGGREGATE_TYPE_DAEMONSET",
		6:  "AGGREGATE_TYPE_DEPARTMENT",
		7:  "AGGREGATE_TYPE_ENVIRONMENT",
		8:  "AGGREGATE_TYPE_JOB",
		9:  "AGGREGATE_TYPE_NAMESPACE",
		10: "AGGREGATE_TYPE_NODE",
		11: "AGGREGATE_TYPE_OWNER",
		12: "AGGREGATE_TYPE_POD",
		13: "AGGREGATE_TYPE_PRODUCT",
		14: "AGGREGATE_TYPE_SERVICE",
		15: "AGGREGATE_TYPE_STATEFULSET",
		16: "AGGREGATE_TYPE_TEAM",
	}
	AggrgateType_value = map[string]int32{
		"AGGREGATE_TYPE_UNSPECIFIED":     0,
		"AGGREGATE_TYPE_CLUSTER":         1,
		"AGGREGATE_TYPE_CONTAINER":       2,
		"AGGREGATE_TYPE_CONTROLLER":      3,
		"AGGREGATE_TYPE_CONTROLLER_KIND": 4,
		"AGGREGATE_TYPE_DAEMONSET":       5,
		"AGGREGATE_TYPE_DEPARTMENT":      6,
		"AGGREGATE_TYPE_ENVIRONMENT":     7,
		"AGGREGATE_TYPE_JOB":             8,
		"AGGREGATE_TYPE_NAMESPACE":       9,
		"AGGREGATE_TYPE_NODE":            10,
		"AGGREGATE_TYPE_OWNER":           11,
		"AGGREGATE_TYPE_POD":             12,
		"AGGREGATE_TYPE_PRODUCT":         13,
		"AGGREGATE_TYPE_SERVICE":         14,
		"AGGREGATE_TYPE_STATEFULSET":     15,
		"AGGREGATE_TYPE_TEAM":            16,
	}
)

func (x AggrgateType) Enum() *AggrgateType {
	p := new(AggrgateType)
	*p = x
	return p
}

func (x AggrgateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggrgateType) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[0].Descriptor()
}

func (AggrgateType) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[0]
}

func (x AggrgateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggrgateType.Descriptor instead.
func (AggrgateType) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{0}
}

// An Enum for split the Idle cost in Allocation Summary.
type IdleCostsType int32

const (
	IdleCostsType_IDLE_COSTS_TYPE_UNSPECIFIED      IdleCostsType = 0
	IdleCostsType_IDLE_COSTS_TYPE_HIDE             IdleCostsType = 1
	IdleCostsType_IDLE_COSTS_TYPE_SEPARATE         IdleCostsType = 2
	IdleCostsType_IDLE_COSTS_TYPE_SHARE_BY_CLUSTER IdleCostsType = 3
	IdleCostsType_IDLE_COSTS_TYPE_SHARE_BY_NODE    IdleCostsType = 4
)

// Enum value maps for IdleCostsType.
var (
	IdleCostsType_name = map[int32]string{
		0: "IDLE_COSTS_TYPE_UNSPECIFIED",
		1: "IDLE_COSTS_TYPE_HIDE",
		2: "IDLE_COSTS_TYPE_SEPARATE",
		3: "IDLE_COSTS_TYPE_SHARE_BY_CLUSTER",
		4: "IDLE_COSTS_TYPE_SHARE_BY_NODE",
	}
	IdleCostsType_value = map[string]int32{
		"IDLE_COSTS_TYPE_UNSPECIFIED":      0,
		"IDLE_COSTS_TYPE_HIDE":             1,
		"IDLE_COSTS_TYPE_SEPARATE":         2,
		"IDLE_COSTS_TYPE_SHARE_BY_CLUSTER": 3,
		"IDLE_COSTS_TYPE_SHARE_BY_NODE":    4,
	}
)

func (x IdleCostsType) Enum() *IdleCostsType {
	p := new(IdleCostsType)
	*p = x
	return p
}

func (x IdleCostsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdleCostsType) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[1].Descriptor()
}

func (IdleCostsType) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[1]
}

func (x IdleCostsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdleCostsType.Descriptor instead.
func (IdleCostsType) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{1}
}

// An Enum to select the cost metrics for the Allocation Summary.
type CostMetricType int32

const (
	CostMetricType_COST_METRIC_UNSPECIFIED     CostMetricType = 0
	CostMetricType_COST_METRIC_CUMULATIVE_COST CostMetricType = 1
	CostMetricType_COST_METRIC_MONTHLY_RATE    CostMetricType = 2
	CostMetricType_COST_METRIC_DAILY_RATE      CostMetricType = 3
	CostMetricType_COST_METRIC_HOURLY_RATE     CostMetricType = 4
)

// Enum value maps for CostMetricType.
var (
	CostMetricType_name = map[int32]string{
		0: "COST_METRIC_UNSPECIFIED",
		1: "COST_METRIC_CUMULATIVE_COST",
		2: "COST_METRIC_MONTHLY_RATE",
		3: "COST_METRIC_DAILY_RATE",
		4: "COST_METRIC_HOURLY_RATE",
	}
	CostMetricType_value = map[string]int32{
		"COST_METRIC_UNSPECIFIED":     0,
		"COST_METRIC_CUMULATIVE_COST": 1,
		"COST_METRIC_MONTHLY_RATE":    2,
		"COST_METRIC_DAILY_RATE":      3,
		"COST_METRIC_HOURLY_RATE":     4,
	}
)

func (x CostMetricType) Enum() *CostMetricType {
	p := new(CostMetricType)
	*p = x
	return p
}

func (x CostMetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CostMetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[2].Descriptor()
}

func (CostMetricType) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[2]
}

func (x CostMetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CostMetricType.Descriptor instead.
func (CostMetricType) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{2}
}

// Enum for the shared split which can either be weighted or even.
type ShareSplit int32

const (
	ShareSplit_SHARE_SPLIT_UNSPECIFIED ShareSplit = 0
	ShareSplit_SHARESPLIT_WEIGHTED     ShareSplit = 1
	ShareSplit_SHARESPLIT_EVEN         ShareSplit = 2
)

// Enum value maps for ShareSplit.
var (
	ShareSplit_name = map[int32]string{
		0: "SHARE_SPLIT_UNSPECIFIED",
		1: "SHARESPLIT_WEIGHTED",
		2: "SHARESPLIT_EVEN",
	}
	ShareSplit_value = map[string]int32{
		"SHARE_SPLIT_UNSPECIFIED": 0,
		"SHARESPLIT_WEIGHTED":     1,
		"SHARESPLIT_EVEN":         2,
	}
)

func (x ShareSplit) Enum() *ShareSplit {
	p := new(ShareSplit)
	*p = x
	return p
}

func (x ShareSplit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareSplit) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[3].Descriptor()
}

func (ShareSplit) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[3]
}

func (x ShareSplit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareSplit.Descriptor instead.
func (ShareSplit) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{3}
}

type Filters_FilterType int32

const (
	Filters_FILTER_TYPE_UNSPECIFIED      Filters_FilterType = 0
	Filters_FILTER_TYPE_CLUSTERS         Filters_FilterType = 1
	Filters_FILTER_TYPE_NODES            Filters_FilterType = 2
	Filters_FILTER_TYPE_NAMESPACES       Filters_FilterType = 3
	Filters_FILTER_TYPE_CONTROLLER_KINDS Filters_FilterType = 4
	Filters_FILTER_TYPE_CONTROLLERS      Filters_FilterType = 5
	Filters_FILTER_TYPE_PODS             Filters_FilterType = 6
	Filters_FILTER_TYPE_ANNOTATIONS      Filters_FilterType = 7
	Filters_FILTER_TYPE_LABELS           Filters_FilterType = 8
	Filters_FILTER_TYPE_SERVICES         Filters_FilterType = 9
)

// Enum value maps for Filters_FilterType.
var (
	Filters_FilterType_name = map[int32]string{
		0: "FILTER_TYPE_UNSPECIFIED",
		1: "FILTER_TYPE_CLUSTERS",
		2: "FILTER_TYPE_NODES",
		3: "FILTER_TYPE_NAMESPACES",
		4: "FILTER_TYPE_CONTROLLER_KINDS",
		5: "FILTER_TYPE_CONTROLLERS",
		6: "FILTER_TYPE_PODS",
		7: "FILTER_TYPE_ANNOTATIONS",
		8: "FILTER_TYPE_LABELS",
		9: "FILTER_TYPE_SERVICES",
	}
	Filters_FilterType_value = map[string]int32{
		"FILTER_TYPE_UNSPECIFIED":      0,
		"FILTER_TYPE_CLUSTERS":         1,
		"FILTER_TYPE_NODES":            2,
		"FILTER_TYPE_NAMESPACES":       3,
		"FILTER_TYPE_CONTROLLER_KINDS": 4,
		"FILTER_TYPE_CONTROLLERS":      5,
		"FILTER_TYPE_PODS":             6,
		"FILTER_TYPE_ANNOTATIONS":      7,
		"FILTER_TYPE_LABELS":           8,
		"FILTER_TYPE_SERVICES":         9,
	}
)

func (x Filters_FilterType) Enum() *Filters_FilterType {
	p := new(Filters_FilterType)
	*p = x
	return p
}

func (x Filters_FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filters_FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[4].Descriptor()
}

func (Filters_FilterType) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[4]
}

func (x Filters_FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filters_FilterType.Descriptor instead.
func (Filters_FilterType) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{4, 0}
}

// Window represents the requested data range for the Allocation Summary data.
type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// window can either be absolute window or relative window.
	//
	// Types that are assignable to Window:
	//	*Window_AbsoluteWindow
	//	*Window_RelativeWindow
	Window isWindow_Window `protobuf_oneof:"window"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{0}
}

func (m *Window) GetWindow() isWindow_Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (x *Window) GetAbsoluteWindow() *AbsoluteWindow {
	if x, ok := x.GetWindow().(*Window_AbsoluteWindow); ok {
		return x.AbsoluteWindow
	}
	return nil
}

func (x *Window) GetRelativeWindow() *RelativeWindow {
	if x, ok := x.GetWindow().(*Window_RelativeWindow); ok {
		return x.RelativeWindow
	}
	return nil
}

type isWindow_Window interface {
	isWindow_Window()
}

type Window_AbsoluteWindow struct {
	AbsoluteWindow *AbsoluteWindow `protobuf:"bytes,1,opt,name=absolute_window,json=absoluteWindow,proto3,oneof"`
}

type Window_RelativeWindow struct {
	RelativeWindow *RelativeWindow `protobuf:"bytes,2,opt,name=relative_window,json=relativeWindow,proto3,oneof"`
}

func (*Window_AbsoluteWindow) isWindow_Window() {}

func (*Window_RelativeWindow) isWindow_Window() {}

// Absolute Window represents an absolute date range with start and end dates.
type AbsoluteWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For example:
	// {
	//    "window":
	//        {"absolute_window": {
	//                "start": "2022-08-14T00:00:00Z,",
	//                "end": "2021-08-21T00:00:00Z"}"}
	// }
	// accepted value are comma-separated RFC3339 date.
	// Start of the requested Date range of Allocation Summary.
	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// End of the requested Date range of Allocation Summary.
	End string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AbsoluteWindow) Reset() {
	*x = AbsoluteWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteWindow) ProtoMessage() {}

func (x *AbsoluteWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteWindow.ProtoReflect.Descriptor instead.
func (*AbsoluteWindow) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{1}
}

func (x *AbsoluteWindow) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *AbsoluteWindow) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

// Relative window represents duration for the requested data.
type RelativeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For example:
	// {
	//    "window":
	//                {"relative_window": {"duration":"24h"
	// }
	// Accepts: words like today, week, month, yesterday, lastweek,
	// lastmonth; durations like 30m, 12h, 7d and others.
	// duration of the requested Date range of Allocation Summary Data.
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *RelativeWindow) Reset() {
	*x = RelativeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeWindow) ProtoMessage() {}

func (x *RelativeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeWindow.ProtoReflect.Descriptor instead.
func (*RelativeWindow) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{2}
}

func (x *RelativeWindow) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

// Message having the filterV1 Selection.
type FilterV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterV1 []*Filters `protobuf:"bytes,1,rep,name=filterV1,proto3" json:"filterV1,omitempty"`
}

func (x *FilterV1) Reset() {
	*x = FilterV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterV1) ProtoMessage() {}

func (x *FilterV1) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterV1.ProtoReflect.Descriptor instead.
func (*FilterV1) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{3}
}

func (x *FilterV1) GetFilterV1() []*Filters {
	if x != nil {
		return x.FilterV1
	}
	return nil
}

// Filter Selection represents the v1 filter for the Allocation Summary Request.
type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For example: {"filter":{"filtersV1": [{"FILTER_TYPE_CLUSTERS":["clusterA",
	// "clusterB"]},{"FILTER_TYPE_NAMESPACES":["NameSpaceA", "NameSpaceB"]}]}}
	//  to filter data of only clusterA
	// and clusterB and Namespace A and B.
	// The Type of Filter selected on the Allocation Summary Data
	Type Filters_FilterType `protobuf:"varint,1,opt,name=type,proto3,enum=kubecost.service.allocation.allocationsummary.v1.Filters_FilterType" json:"type,omitempty"`
	// Value assigned to the Filter which is repeated
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Filters) Reset() {
	*x = Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{4}
}

func (x *Filters) GetType() Filters_FilterType {
	if x != nil {
		return x.Type
	}
	return Filters_FILTER_TYPE_UNSPECIFIED
}

func (x *Filters) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Resource for different shared selection available for the user on the User Interface.
type SharedSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// share the cluster overhead assets with non-idle allocations.
	SharedTenancyCosts bool `protobuf:"varint,1,opt,name=shared_tenancy_costs,json=sharedTenancyCosts,proto3" json:"shared_tenancy_costs,omitempty"`
	// list of namespaces to share the cost with non-idle allocations.
	CustomSharedNamespaces []string `protobuf:"bytes,2,rep,name=custom_shared_namespaces,json=customSharedNamespaces,proto3" json:"custom_shared_namespaces,omitempty"`
	// list of labels to share the cost with non-idle allocations.
	CustomSharedLabels []string `protobuf:"bytes,3,rep,name=custom_shared_labels,json=customSharedLabels,proto3" json:"custom_shared_labels,omitempty"`
	// Cost to be shared with other non-idle allocations.
	CustomSharedOverheadCost float64 `protobuf:"fixed64,4,opt,name=custom_shared_overhead_cost,json=customSharedOverheadCost,proto3" json:"custom_shared_overhead_cost,omitempty"`
	// Handle Unshared Allocations with non-idle allocations.
	SharedSplit ShareSplit `protobuf:"varint,5,opt,name=shared_split,json=sharedSplit,proto3,enum=kubecost.service.allocation.allocationsummary.v1.ShareSplit" json:"shared_split,omitempty"`
}

func (x *SharedSelection) Reset() {
	*x = SharedSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedSelection) ProtoMessage() {}

func (x *SharedSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedSelection.ProtoReflect.Descriptor instead.
func (*SharedSelection) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{5}
}

func (x *SharedSelection) GetSharedTenancyCosts() bool {
	if x != nil {
		return x.SharedTenancyCosts
	}
	return false
}

func (x *SharedSelection) GetCustomSharedNamespaces() []string {
	if x != nil {
		return x.CustomSharedNamespaces
	}
	return nil
}

func (x *SharedSelection) GetCustomSharedLabels() []string {
	if x != nil {
		return x.CustomSharedLabels
	}
	return nil
}

func (x *SharedSelection) GetCustomSharedOverheadCost() float64 {
	if x != nil {
		return x.CustomSharedOverheadCost
	}
	return 0
}

func (x *SharedSelection) GetSharedSplit() ShareSplit {
	if x != nil {
		return x.SharedSplit
	}
	return ShareSplit_SHARE_SPLIT_UNSPECIFIED
}

// AllocationSummaryRequest is the request to list Allocation Summary Data
type AllocationSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Window for which the Allocation Summary is requested
	Window *Window `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	// Starting index of the first Allocation Summary Data
	ResultStartIndex int32 `protobuf:"varint,2,opt,name=result_start_index,json=resultStartIndex,proto3" json:"result_start_index,omitempty"`
	// Maximum number of results of Allocation Summary Data
	MaxNumResults int32 `protobuf:"varint,3,opt,name=max_num_results,json=maxNumResults,proto3" json:"max_num_results,omitempty"`
	// Aggregation of Allocation Summary requested on.
	// For example: {"aggregate_by": [9,12]} or
	// {"aggregate_by": [AGGREGATE_TYPE_NAMESPACE,AGGREGATE_TYPE_POD]}
	// to aggregate on namespace and pod
	AggregateBy []AggrgateType `protobuf:"varint,4,rep,packed,name=aggregate_by,json=aggregateBy,proto3,enum=kubecost.service.allocation.allocationsummary.v1.AggrgateType" json:"aggregate_by,omitempty"`
	// Selection of Idle cost on Allocation Summary.
	IdleCosts IdleCostsType `protobuf:"varint,5,opt,name=idle_costs,json=idleCosts,proto3,enum=kubecost.service.allocation.allocationsummary.v1.IdleCostsType" json:"idle_costs,omitempty"`
	// Selection of Cost Metrics on Allocation Summary.
	// For example: {"cost_metrics": 1} or  {"cost_metrics": COST_METRIC_CUMULATIVE_COST }
	// to display Allocation Summary with cumulative cost
	CostMetrics CostMetricType `protobuf:"varint,6,opt,name=cost_metrics,json=costMetrics,proto3,enum=kubecost.service.allocation.allocationsummary.v1.CostMetricType" json:"cost_metrics,omitempty"`
	// Filters applied on the Allocation Summary Data.
	//
	// Types that are assignable to Filter:
	//	*AllocationSummaryRequest_FilterV1
	//	*AllocationSummaryRequest_FilterV2
	Filter isAllocationSummaryRequest_Filter `protobuf_oneof:"filter"`
	// decision to be made for the Shared Resources on Allocation Summary data.
	SharedResources *SharedSelection `protobuf:"bytes,9,opt,name=shared_resources,json=sharedResources,proto3" json:"shared_resources,omitempty"`
}

func (x *AllocationSummaryRequest) Reset() {
	*x = AllocationSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryRequest) ProtoMessage() {}

func (x *AllocationSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryRequest.ProtoReflect.Descriptor instead.
func (*AllocationSummaryRequest) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{6}
}

func (x *AllocationSummaryRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *AllocationSummaryRequest) GetResultStartIndex() int32 {
	if x != nil {
		return x.ResultStartIndex
	}
	return 0
}

func (x *AllocationSummaryRequest) GetMaxNumResults() int32 {
	if x != nil {
		return x.MaxNumResults
	}
	return 0
}

func (x *AllocationSummaryRequest) GetAggregateBy() []AggrgateType {
	if x != nil {
		return x.AggregateBy
	}
	return nil
}

func (x *AllocationSummaryRequest) GetIdleCosts() IdleCostsType {
	if x != nil {
		return x.IdleCosts
	}
	return IdleCostsType_IDLE_COSTS_TYPE_UNSPECIFIED
}

func (x *AllocationSummaryRequest) GetCostMetrics() CostMetricType {
	if x != nil {
		return x.CostMetrics
	}
	return CostMetricType_COST_METRIC_UNSPECIFIED
}

func (m *AllocationSummaryRequest) GetFilter() isAllocationSummaryRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *AllocationSummaryRequest) GetFilterV1() *FilterV1 {
	if x, ok := x.GetFilter().(*AllocationSummaryRequest_FilterV1); ok {
		return x.FilterV1
	}
	return nil
}

func (x *AllocationSummaryRequest) GetFilterV2() string {
	if x, ok := x.GetFilter().(*AllocationSummaryRequest_FilterV2); ok {
		return x.FilterV2
	}
	return ""
}

func (x *AllocationSummaryRequest) GetSharedResources() *SharedSelection {
	if x != nil {
		return x.SharedResources
	}
	return nil
}

type isAllocationSummaryRequest_Filter interface {
	isAllocationSummaryRequest_Filter()
}

type AllocationSummaryRequest_FilterV1 struct {
	FilterV1 *FilterV1 `protobuf:"bytes,7,opt,name=filterV1,proto3,oneof"`
}

type AllocationSummaryRequest_FilterV2 struct {
	FilterV2 string `protobuf:"bytes,8,opt,name=filterV2,proto3,oneof"`
}

func (*AllocationSummaryRequest_FilterV1) isAllocationSummaryRequest_Filter() {}

func (*AllocationSummaryRequest_FilterV2) isAllocationSummaryRequest_Filter() {}

// message for progress updates during the API call.
type AllocationSummaryProgressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represent the percentage completion of Allocation Summary Streaming
	PercentComplete float32 `protobuf:"fixed32,1,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
}

func (x *AllocationSummaryProgressUpdate) Reset() {
	*x = AllocationSummaryProgressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryProgressUpdate) ProtoMessage() {}

func (x *AllocationSummaryProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryProgressUpdate.ProtoReflect.Descriptor instead.
func (*AllocationSummaryProgressUpdate) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{7}
}

func (x *AllocationSummaryProgressUpdate) GetPercentComplete() float32 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

// Message reprenting the time window for which graph items are listed
// in the visualization.
type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start of the time range of the collected graph items
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The end of the time range of the collected graph items
	End *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{8}
}

func (x *DateRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DateRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// Message containing the information about each kubernetes resource
// that is used to display in graph visualization.
type TimeSeriesGraphItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Kubernetes Resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cost of the Kubernetes Resource.
	Cost float32 `protobuf:"fixed32,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// Efficiency of the Kubernetes Resource.
	Efficiency float32 `protobuf:"fixed32,3,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
}

func (x *TimeSeriesGraphItem) Reset() {
	*x = TimeSeriesGraphItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesGraphItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesGraphItem) ProtoMessage() {}

func (x *TimeSeriesGraphItem) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesGraphItem.ProtoReflect.Descriptor instead.
func (*TimeSeriesGraphItem) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{9}
}

func (x *TimeSeriesGraphItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimeSeriesGraphItem) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *TimeSeriesGraphItem) GetEfficiency() float32 {
	if x != nil {
		return x.Efficiency
	}
	return 0
}

// Resource for the Graph Data to be displayed in each Visualization.
type GraphData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Data Range for which the graph data has to be displayed.
	DateRange *DateRange `protobuf:"bytes,1,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// The list of Graph items for for the corresponding Date range.
	GraphItems []*TimeSeriesGraphItem `protobuf:"bytes,2,rep,name=graph_items,json=graphItems,proto3" json:"graph_items,omitempty"`
	// The graph will have graph_top_results number of graph_items and an
	// additional entry that will be aggregate of all the other graph_items
	GraphTopResults int32 `protobuf:"varint,3,opt,name=graph_top_results,json=graphTopResults,proto3" json:"graph_top_results,omitempty"`
}

func (x *GraphData) Reset() {
	*x = GraphData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphData) ProtoMessage() {}

func (x *GraphData) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphData.ProtoReflect.Descriptor instead.
func (*GraphData) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{10}
}

func (x *GraphData) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GraphData) GetGraphItems() []*TimeSeriesGraphItem {
	if x != nil {
		return x.GraphItems
	}
	return nil
}

func (x *GraphData) GetGraphTopResults() int32 {
	if x != nil {
		return x.GraphTopResults
	}
	return 0
}

// message for each allocation summary Item
type SummaryTableItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Name of the Allocation Summary Table Item representing the Kubernetes Resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CPU Cost associated with the Kubenetes Resource.
	CpuCost float64 `protobuf:"fixed64,2,opt,name=cpu_cost,json=cpuCost,proto3" json:"cpu_cost,omitempty"`
	// GPU Cost associated with the Kubenetes Resource.
	GpuCost float64 `protobuf:"fixed64,3,opt,name=gpu_cost,json=gpuCost,proto3" json:"gpu_cost,omitempty"`
	// RAM Cost associated with the Kubenetes Resource.
	RamCost float64 `protobuf:"fixed64,4,opt,name=ram_cost,json=ramCost,proto3" json:"ram_cost,omitempty"`
	// Persistent Volume Cost associated with the Kubenetes Resource.
	PvCost float64 `protobuf:"fixed64,5,opt,name=pv_cost,json=pvCost,proto3" json:"pv_cost,omitempty"`
	// NetWork Cost associated with the Kubenetes Resource.
	NetworkCost float64 `protobuf:"fixed64,6,opt,name=network_cost,json=networkCost,proto3" json:"network_cost,omitempty"`
	// LoadBalancer Cost associated with the Kubenetes Resource.
	LoadBalancerCost float64 `protobuf:"fixed64,7,opt,name=loadBalancer_cost,json=loadBalancerCost,proto3" json:"loadBalancer_cost,omitempty"`
	// Shared Cost associated with the Kubenetes Resource.
	SharedCost float64 `protobuf:"fixed64,8,opt,name=shared_cost,json=sharedCost,proto3" json:"shared_cost,omitempty"`
	// External Cost associated with the Kubenetes Resource.
	ExternalCost float64 `protobuf:"fixed64,9,opt,name=external_cost,json=externalCost,proto3" json:"external_cost,omitempty"`
	// Efficiency of the Kubenetes Resource.
	Efficiency float32 `protobuf:"fixed32,10,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	// Total Cost associated with the Kubenetes Resource.
	TotalCost float64 `protobuf:"fixed64,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *SummaryTableItem) Reset() {
	*x = SummaryTableItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryTableItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryTableItem) ProtoMessage() {}

func (x *SummaryTableItem) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryTableItem.ProtoReflect.Descriptor instead.
func (*SummaryTableItem) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{11}
}

func (x *SummaryTableItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SummaryTableItem) GetCpuCost() float64 {
	if x != nil {
		return x.CpuCost
	}
	return 0
}

func (x *SummaryTableItem) GetGpuCost() float64 {
	if x != nil {
		return x.GpuCost
	}
	return 0
}

func (x *SummaryTableItem) GetRamCost() float64 {
	if x != nil {
		return x.RamCost
	}
	return 0
}

func (x *SummaryTableItem) GetPvCost() float64 {
	if x != nil {
		return x.PvCost
	}
	return 0
}

func (x *SummaryTableItem) GetNetworkCost() float64 {
	if x != nil {
		return x.NetworkCost
	}
	return 0
}

func (x *SummaryTableItem) GetLoadBalancerCost() float64 {
	if x != nil {
		return x.LoadBalancerCost
	}
	return 0
}

func (x *SummaryTableItem) GetSharedCost() float64 {
	if x != nil {
		return x.SharedCost
	}
	return 0
}

func (x *SummaryTableItem) GetExternalCost() float64 {
	if x != nil {
		return x.ExternalCost
	}
	return 0
}

func (x *SummaryTableItem) GetEfficiency() float32 {
	if x != nil {
		return x.Efficiency
	}
	return 0
}

func (x *SummaryTableItem) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

// message for complete allocation summary response.
type FinalAllocationSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents the Graph data for the allocation summary visualization.
	GraphData *GraphData `protobuf:"bytes,1,opt,name=graph_data,json=graphData,proto3" json:"graph_data,omitempty"`
	// The Table entry corresponding to Totals in Allocation Summary Table.
	TotalItem *SummaryTableItem `protobuf:"bytes,2,opt,name=total_item,json=totalItem,proto3" json:"total_item,omitempty"`
	// returns the result_start_index to max_num_results from that index requested in the
	// Allocation Summary Request.
	EachTableItems []*SummaryTableItem `protobuf:"bytes,3,rep,name=each_table_items,json=eachTableItems,proto3" json:"each_table_items,omitempty"`
}

func (x *FinalAllocationSummaryResponse) Reset() {
	*x = FinalAllocationSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalAllocationSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalAllocationSummaryResponse) ProtoMessage() {}

func (x *FinalAllocationSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalAllocationSummaryResponse.ProtoReflect.Descriptor instead.
func (*FinalAllocationSummaryResponse) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{12}
}

func (x *FinalAllocationSummaryResponse) GetGraphData() *GraphData {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *FinalAllocationSummaryResponse) GetTotalItem() *SummaryTableItem {
	if x != nil {
		return x.TotalItem
	}
	return nil
}

func (x *FinalAllocationSummaryResponse) GetEachTableItems() []*SummaryTableItem {
	if x != nil {
		return x.EachTableItems
	}
	return nil
}

// message for the allocationsummary response can either be partial response
// which contains percentage Completion or complete allocation response having all the details
type AllocationSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*AllocationSummaryResponse_StatusUpdate
	//	*AllocationSummaryResponse_FinalAllocationSummaryResponse
	Response isAllocationSummaryResponse_Response `protobuf_oneof:"response"`
}

func (x *AllocationSummaryResponse) Reset() {
	*x = AllocationSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryResponse) ProtoMessage() {}

func (x *AllocationSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryResponse.ProtoReflect.Descriptor instead.
func (*AllocationSummaryResponse) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{13}
}

func (m *AllocationSummaryResponse) GetResponse() isAllocationSummaryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AllocationSummaryResponse) GetStatusUpdate() *AllocationSummaryProgressUpdate {
	if x, ok := x.GetResponse().(*AllocationSummaryResponse_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *AllocationSummaryResponse) GetFinalAllocationSummaryResponse() *FinalAllocationSummaryResponse {
	if x, ok := x.GetResponse().(*AllocationSummaryResponse_FinalAllocationSummaryResponse); ok {
		return x.FinalAllocationSummaryResponse
	}
	return nil
}

type isAllocationSummaryResponse_Response interface {
	isAllocationSummaryResponse_Response()
}

type AllocationSummaryResponse_StatusUpdate struct {
	StatusUpdate *AllocationSummaryProgressUpdate `protobuf:"bytes,1,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type AllocationSummaryResponse_FinalAllocationSummaryResponse struct {
	FinalAllocationSummaryResponse *FinalAllocationSummaryResponse `protobuf:"bytes,2,opt,name=final_allocation_summary_response,json=finalAllocationSummaryResponse,proto3,oneof"`
}

func (*AllocationSummaryResponse_StatusUpdate) isAllocationSummaryResponse_Response() {}

func (*AllocationSummaryResponse_FinalAllocationSummaryResponse) isAllocationSummaryResponse_Response() {
}

var File_allocation_allocationsummary_proto protoreflect.FileDescriptor

var file_allocation_allocationsummary_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x6b, 0x0a, 0x0f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x6b, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x38, 0x0a, 0x0e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0x2c, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x31, 0x12, 0x55, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x56, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x31, 0x22, 0x96, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x02,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x53, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x09, 0x22, 0xcf, 0x02, 0x0a, 0x0f, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xda, 0x05, 0x0a,
	0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x61, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x67,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x12, 0x5e, 0x0a, 0x0a, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x6c, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x56, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x31, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x56, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x32, 0x12, 0x6c, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x1f, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x6b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x66, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x74,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xe5, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x76, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x76,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xcd, 0x02, 0x0a, 0x1e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6c, 0x0a, 0x10, 0x65,
	0x61, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x65, 0x61, 0x63, 0x68, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x9d, 0x01, 0x0a, 0x21, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xfa, 0x03,
	0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x41,
	0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52,
	0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x08,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10,
	0x0b, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x53, 0x45, 0x54, 0x10,
	0x0f, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x10, 0x2a, 0xb1, 0x01, 0x0a, 0x0d, 0x49,
	0x64, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x2a, 0xa5,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x55,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f,
	0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x32,
	0xca, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x4a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x50, 0x5a, 0x4e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_allocation_allocationsummary_proto_rawDescOnce sync.Once
	file_allocation_allocationsummary_proto_rawDescData = file_allocation_allocationsummary_proto_rawDesc
)

func file_allocation_allocationsummary_proto_rawDescGZIP() []byte {
	file_allocation_allocationsummary_proto_rawDescOnce.Do(func() {
		file_allocation_allocationsummary_proto_rawDescData = protoimpl.X.CompressGZIP(file_allocation_allocationsummary_proto_rawDescData)
	})
	return file_allocation_allocationsummary_proto_rawDescData
}

var file_allocation_allocationsummary_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_allocation_allocationsummary_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_allocation_allocationsummary_proto_goTypes = []interface{}{
	(AggrgateType)(0),                       // 0: kubecost.service.allocation.allocationsummary.v1.AggrgateType
	(IdleCostsType)(0),                      // 1: kubecost.service.allocation.allocationsummary.v1.IdleCostsType
	(CostMetricType)(0),                     // 2: kubecost.service.allocation.allocationsummary.v1.CostMetricType
	(ShareSplit)(0),                         // 3: kubecost.service.allocation.allocationsummary.v1.ShareSplit
	(Filters_FilterType)(0),                 // 4: kubecost.service.allocation.allocationsummary.v1.Filters.FilterType
	(*Window)(nil),                          // 5: kubecost.service.allocation.allocationsummary.v1.Window
	(*AbsoluteWindow)(nil),                  // 6: kubecost.service.allocation.allocationsummary.v1.AbsoluteWindow
	(*RelativeWindow)(nil),                  // 7: kubecost.service.allocation.allocationsummary.v1.RelativeWindow
	(*FilterV1)(nil),                        // 8: kubecost.service.allocation.allocationsummary.v1.FilterV1
	(*Filters)(nil),                         // 9: kubecost.service.allocation.allocationsummary.v1.Filters
	(*SharedSelection)(nil),                 // 10: kubecost.service.allocation.allocationsummary.v1.SharedSelection
	(*AllocationSummaryRequest)(nil),        // 11: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest
	(*AllocationSummaryProgressUpdate)(nil), // 12: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryProgressUpdate
	(*DateRange)(nil),                       // 13: kubecost.service.allocation.allocationsummary.v1.DateRange
	(*TimeSeriesGraphItem)(nil),             // 14: kubecost.service.allocation.allocationsummary.v1.TimeSeriesGraphItem
	(*GraphData)(nil),                       // 15: kubecost.service.allocation.allocationsummary.v1.GraphData
	(*SummaryTableItem)(nil),                // 16: kubecost.service.allocation.allocationsummary.v1.SummaryTableItem
	(*FinalAllocationSummaryResponse)(nil),  // 17: kubecost.service.allocation.allocationsummary.v1.FinalAllocationSummaryResponse
	(*AllocationSummaryResponse)(nil),       // 18: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryResponse
	(*timestamppb.Timestamp)(nil),           // 19: google.protobuf.Timestamp
}
var file_allocation_allocationsummary_proto_depIdxs = []int32{
	6,  // 0: kubecost.service.allocation.allocationsummary.v1.Window.absolute_window:type_name -> kubecost.service.allocation.allocationsummary.v1.AbsoluteWindow
	7,  // 1: kubecost.service.allocation.allocationsummary.v1.Window.relative_window:type_name -> kubecost.service.allocation.allocationsummary.v1.RelativeWindow
	9,  // 2: kubecost.service.allocation.allocationsummary.v1.FilterV1.filterV1:type_name -> kubecost.service.allocation.allocationsummary.v1.Filters
	4,  // 3: kubecost.service.allocation.allocationsummary.v1.Filters.type:type_name -> kubecost.service.allocation.allocationsummary.v1.Filters.FilterType
	3,  // 4: kubecost.service.allocation.allocationsummary.v1.SharedSelection.shared_split:type_name -> kubecost.service.allocation.allocationsummary.v1.ShareSplit
	5,  // 5: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.window:type_name -> kubecost.service.allocation.allocationsummary.v1.Window
	0,  // 6: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.aggregate_by:type_name -> kubecost.service.allocation.allocationsummary.v1.AggrgateType
	1,  // 7: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.idle_costs:type_name -> kubecost.service.allocation.allocationsummary.v1.IdleCostsType
	2,  // 8: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.cost_metrics:type_name -> kubecost.service.allocation.allocationsummary.v1.CostMetricType
	8,  // 9: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.filterV1:type_name -> kubecost.service.allocation.allocationsummary.v1.FilterV1
	10, // 10: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest.shared_resources:type_name -> kubecost.service.allocation.allocationsummary.v1.SharedSelection
	19, // 11: kubecost.service.allocation.allocationsummary.v1.DateRange.start:type_name -> google.protobuf.Timestamp
	19, // 12: kubecost.service.allocation.allocationsummary.v1.DateRange.end:type_name -> google.protobuf.Timestamp
	13, // 13: kubecost.service.allocation.allocationsummary.v1.GraphData.date_range:type_name -> kubecost.service.allocation.allocationsummary.v1.DateRange
	14, // 14: kubecost.service.allocation.allocationsummary.v1.GraphData.graph_items:type_name -> kubecost.service.allocation.allocationsummary.v1.TimeSeriesGraphItem
	15, // 15: kubecost.service.allocation.allocationsummary.v1.FinalAllocationSummaryResponse.graph_data:type_name -> kubecost.service.allocation.allocationsummary.v1.GraphData
	16, // 16: kubecost.service.allocation.allocationsummary.v1.FinalAllocationSummaryResponse.total_item:type_name -> kubecost.service.allocation.allocationsummary.v1.SummaryTableItem
	16, // 17: kubecost.service.allocation.allocationsummary.v1.FinalAllocationSummaryResponse.each_table_items:type_name -> kubecost.service.allocation.allocationsummary.v1.SummaryTableItem
	12, // 18: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryResponse.status_update:type_name -> kubecost.service.allocation.allocationsummary.v1.AllocationSummaryProgressUpdate
	17, // 19: kubecost.service.allocation.allocationsummary.v1.AllocationSummaryResponse.final_allocation_summary_response:type_name -> kubecost.service.allocation.allocationsummary.v1.FinalAllocationSummaryResponse
	11, // 20: kubecost.service.allocation.allocationsummary.v1.AllocationSummary.ListAllocationSummary:input_type -> kubecost.service.allocation.allocationsummary.v1.AllocationSummaryRequest
	18, // 21: kubecost.service.allocation.allocationsummary.v1.AllocationSummary.ListAllocationSummary:output_type -> kubecost.service.allocation.allocationsummary.v1.AllocationSummaryResponse
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_allocation_allocationsummary_proto_init() }
func file_allocation_allocationsummary_proto_init() {
	if File_allocation_allocationsummary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_allocation_allocationsummary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryProgressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesGraphItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryTableItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalAllocationSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_allocation_allocationsummary_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Window_AbsoluteWindow)(nil),
		(*Window_RelativeWindow)(nil),
	}
	file_allocation_allocationsummary_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AllocationSummaryRequest_FilterV1)(nil),
		(*AllocationSummaryRequest_FilterV2)(nil),
	}
	file_allocation_allocationsummary_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AllocationSummaryResponse_StatusUpdate)(nil),
		(*AllocationSummaryResponse_FinalAllocationSummaryResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_allocation_allocationsummary_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_allocation_allocationsummary_proto_goTypes,
		DependencyIndexes: file_allocation_allocationsummary_proto_depIdxs,
		EnumInfos:         file_allocation_allocationsummary_proto_enumTypes,
		MessageInfos:      file_allocation_allocationsummary_proto_msgTypes,
	}.Build()
	File_allocation_allocationsummary_proto = out.File
	file_allocation_allocationsummary_proto_rawDesc = nil
	file_allocation_allocationsummary_proto_goTypes = nil
	file_allocation_allocationsummary_proto_depIdxs = nil
}
