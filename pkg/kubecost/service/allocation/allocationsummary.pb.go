// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.4
// source: allocation/allocationsummary.proto

package allocationsummary

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Different selection of idle from the User Interface
type IdleSelection int32

const (
	IdleSelection_IDLE_COST_HIDE             IdleSelection = 0
	IdleSelection_IDLE_COST_SEPERATE         IdleSelection = 1
	IdleSelection_IDLE_COST_SHARE_BY_CLUSTER IdleSelection = 2
	IdleSelection_IDLE_COST_SHARE_BY_NODE    IdleSelection = 3
)

// Enum value maps for IdleSelection.
var (
	IdleSelection_name = map[int32]string{
		0: "IDLE_COST_HIDE",
		1: "IDLE_COST_SEPERATE",
		2: "IDLE_COST_SHARE_BY_CLUSTER",
		3: "IDLE_COST_SHARE_BY_NODE",
	}
	IdleSelection_value = map[string]int32{
		"IDLE_COST_HIDE":             0,
		"IDLE_COST_SEPERATE":         1,
		"IDLE_COST_SHARE_BY_CLUSTER": 2,
		"IDLE_COST_SHARE_BY_NODE":    3,
	}
)

func (x IdleSelection) Enum() *IdleSelection {
	p := new(IdleSelection)
	*p = x
	return p
}

func (x IdleSelection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdleSelection) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[0].Descriptor()
}

func (IdleSelection) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[0]
}

func (x IdleSelection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdleSelection.Descriptor instead.
func (IdleSelection) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{0}
}

// Enum for the shared split which can either be weighted or even
type ShareSplit int32

const (
	ShareSplit_SHARESPLIT_WEIGHTED ShareSplit = 0
	ShareSplit_SHARESPLIT_EVEN     ShareSplit = 1
)

// Enum value maps for ShareSplit.
var (
	ShareSplit_name = map[int32]string{
		0: "SHARESPLIT_WEIGHTED",
		1: "SHARESPLIT_EVEN",
	}
	ShareSplit_value = map[string]int32{
		"SHARESPLIT_WEIGHTED": 0,
		"SHARESPLIT_EVEN":     1,
	}
)

func (x ShareSplit) Enum() *ShareSplit {
	p := new(ShareSplit)
	*p = x
	return p
}

func (x ShareSplit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareSplit) Descriptor() protoreflect.EnumDescriptor {
	return file_allocation_allocationsummary_proto_enumTypes[1].Descriptor()
}

func (ShareSplit) Type() protoreflect.EnumType {
	return &file_allocation_allocationsummary_proto_enumTypes[1]
}

func (x ShareSplit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareSplit.Descriptor instead.
func (ShareSplit) EnumDescriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{1}
}

// AllocationSummaryRequest is the request send from client with a specify window
// either absolute window with datetime or relative window with duration
type AllocationSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window     *Window          `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Aggregate  []string         `protobuf:"bytes,2,rep,name=aggregate,proto3" json:"aggregate,omitempty"`
	Accumulate bool             `protobuf:"varint,4,opt,name=accumulate,proto3" json:"accumulate,omitempty"`
	Filter     *FilterSelection `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Shared     *SharedSelection `protobuf:"bytes,6,opt,name=shared,proto3" json:"shared,omitempty"`
	Idle       IdleSelection    `protobuf:"varint,7,opt,name=idle,proto3,enum=kubecost.service.allocation.allocationsummary.IdleSelection" json:"idle,omitempty"`
	External   bool             `protobuf:"varint,8,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *AllocationSummaryRequest) Reset() {
	*x = AllocationSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryRequest) ProtoMessage() {}

func (x *AllocationSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryRequest.ProtoReflect.Descriptor instead.
func (*AllocationSummaryRequest) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{0}
}

func (x *AllocationSummaryRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *AllocationSummaryRequest) GetAggregate() []string {
	if x != nil {
		return x.Aggregate
	}
	return nil
}

func (x *AllocationSummaryRequest) GetAccumulate() bool {
	if x != nil {
		return x.Accumulate
	}
	return false
}

func (x *AllocationSummaryRequest) GetFilter() *FilterSelection {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AllocationSummaryRequest) GetShared() *SharedSelection {
	if x != nil {
		return x.Shared
	}
	return nil
}

func (x *AllocationSummaryRequest) GetIdle() IdleSelection {
	if x != nil {
		return x.Idle
	}
	return IdleSelection_IDLE_COST_HIDE
}

func (x *AllocationSummaryRequest) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

// Window represents the window allocation summary is requested
type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Window:
	//	*Window_AbsWindow
	//	*Window_RelWindow
	Window isWindow_Window `protobuf_oneof:"window"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{1}
}

func (m *Window) GetWindow() isWindow_Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (x *Window) GetAbsWindow() *AbsoluteWindow {
	if x, ok := x.GetWindow().(*Window_AbsWindow); ok {
		return x.AbsWindow
	}
	return nil
}

func (x *Window) GetRelWindow() *RelativeWindow {
	if x, ok := x.GetWindow().(*Window_RelWindow); ok {
		return x.RelWindow
	}
	return nil
}

type isWindow_Window interface {
	isWindow_Window()
}

type Window_AbsWindow struct {
	AbsWindow *AbsoluteWindow `protobuf:"bytes,1,opt,name=absWindow,proto3,oneof"`
}

type Window_RelWindow struct {
	RelWindow *RelativeWindow `protobuf:"bytes,2,opt,name=relWindow,proto3,oneof"`
}

func (*Window_AbsWindow) isWindow_Window() {}

func (*Window_RelWindow) isWindow_Window() {}

// Absolute Window represents the absolute window with start and end time
// for
type AbsoluteWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AbsoluteWindow) Reset() {
	*x = AbsoluteWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbsoluteWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteWindow) ProtoMessage() {}

func (x *AbsoluteWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteWindow.ProtoReflect.Descriptor instead.
func (*AbsoluteWindow) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{2}
}

func (x *AbsoluteWindow) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AbsoluteWindow) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

//Relative window represents duration for the requested data
type RelativeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFrame *durationpb.Duration `protobuf:"bytes,1,opt,name=timeFrame,proto3" json:"timeFrame,omitempty"`
}

func (x *RelativeWindow) Reset() {
	*x = RelativeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeWindow) ProtoMessage() {}

func (x *RelativeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeWindow.ProtoReflect.Descriptor instead.
func (*RelativeWindow) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{3}
}

func (x *RelativeWindow) GetTimeFrame() *durationpb.Duration {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

// Filter selection represents the filter on the summary data to be returned
type FilterSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterClusters        []string `protobuf:"bytes,1,rep,name=filterClusters,proto3" json:"filterClusters,omitempty"`
	FilterNodes           []string `protobuf:"bytes,2,rep,name=filterNodes,proto3" json:"filterNodes,omitempty"`
	FilterNamespaces      []string `protobuf:"bytes,3,rep,name=filterNamespaces,proto3" json:"filterNamespaces,omitempty"`
	FilterControllerKinds []string `protobuf:"bytes,4,rep,name=filterControllerKinds,proto3" json:"filterControllerKinds,omitempty"`
	FilterController      []string `protobuf:"bytes,5,rep,name=filterController,proto3" json:"filterController,omitempty"`
	FilterPods            []string `protobuf:"bytes,6,rep,name=filterPods,proto3" json:"filterPods,omitempty"`
	FilterAnnotations     []string `protobuf:"bytes,7,rep,name=filterAnnotations,proto3" json:"filterAnnotations,omitempty"`
	FilterLabels          []string `protobuf:"bytes,8,rep,name=filterLabels,proto3" json:"filterLabels,omitempty"`
	FilterServices        []string `protobuf:"bytes,9,rep,name=filterServices,proto3" json:"filterServices,omitempty"`
}

func (x *FilterSelection) Reset() {
	*x = FilterSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSelection) ProtoMessage() {}

func (x *FilterSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSelection.ProtoReflect.Descriptor instead.
func (*FilterSelection) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{4}
}

func (x *FilterSelection) GetFilterClusters() []string {
	if x != nil {
		return x.FilterClusters
	}
	return nil
}

func (x *FilterSelection) GetFilterNodes() []string {
	if x != nil {
		return x.FilterNodes
	}
	return nil
}

func (x *FilterSelection) GetFilterNamespaces() []string {
	if x != nil {
		return x.FilterNamespaces
	}
	return nil
}

func (x *FilterSelection) GetFilterControllerKinds() []string {
	if x != nil {
		return x.FilterControllerKinds
	}
	return nil
}

func (x *FilterSelection) GetFilterController() []string {
	if x != nil {
		return x.FilterController
	}
	return nil
}

func (x *FilterSelection) GetFilterPods() []string {
	if x != nil {
		return x.FilterPods
	}
	return nil
}

func (x *FilterSelection) GetFilterAnnotations() []string {
	if x != nil {
		return x.FilterAnnotations
	}
	return nil
}

func (x *FilterSelection) GetFilterLabels() []string {
	if x != nil {
		return x.FilterLabels
	}
	return nil
}

func (x *FilterSelection) GetFilterServices() []string {
	if x != nil {
		return x.FilterServices
	}
	return nil
}

// Different shared selection available for the user on the User Interface
type SharedSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareTenancyCosts bool       `protobuf:"varint,1,opt,name=shareTenancyCosts,proto3" json:"shareTenancyCosts,omitempty"`
	ShareNamespaces   string     `protobuf:"bytes,2,opt,name=shareNamespaces,proto3" json:"shareNamespaces,omitempty"`
	ShareLabels       string     `protobuf:"bytes,3,opt,name=shareLabels,proto3" json:"shareLabels,omitempty"`
	ShareCost         float64    `protobuf:"fixed64,4,opt,name=shareCost,proto3" json:"shareCost,omitempty"`
	ShareSplit        ShareSplit `protobuf:"varint,5,opt,name=shareSplit,proto3,enum=kubecost.service.allocation.allocationsummary.ShareSplit" json:"shareSplit,omitempty"`
}

func (x *SharedSelection) Reset() {
	*x = SharedSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedSelection) ProtoMessage() {}

func (x *SharedSelection) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedSelection.ProtoReflect.Descriptor instead.
func (*SharedSelection) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{5}
}

func (x *SharedSelection) GetShareTenancyCosts() bool {
	if x != nil {
		return x.ShareTenancyCosts
	}
	return false
}

func (x *SharedSelection) GetShareNamespaces() string {
	if x != nil {
		return x.ShareNamespaces
	}
	return ""
}

func (x *SharedSelection) GetShareLabels() string {
	if x != nil {
		return x.ShareLabels
	}
	return ""
}

func (x *SharedSelection) GetShareCost() float64 {
	if x != nil {
		return x.ShareCost
	}
	return 0
}

func (x *SharedSelection) GetShareSplit() ShareSplit {
	if x != nil {
		return x.ShareSplit
	}
	return ShareSplit_SHARESPLIT_WEIGHTED
}

// message for the allocationsummary response can either be partial response with each graphdata
// or complete allocation response having all the details
type AllocationSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*AllocationSummaryResponse_StatusUpdate
	//	*AllocationSummaryResponse_FullResponse
	Data isAllocationSummaryResponse_Data `protobuf_oneof:"data"`
}

func (x *AllocationSummaryResponse) Reset() {
	*x = AllocationSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSummaryResponse) ProtoMessage() {}

func (x *AllocationSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSummaryResponse.ProtoReflect.Descriptor instead.
func (*AllocationSummaryResponse) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{6}
}

func (m *AllocationSummaryResponse) GetData() isAllocationSummaryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *AllocationSummaryResponse) GetStatusUpdate() *AllocationProgressUpdate {
	if x, ok := x.GetData().(*AllocationSummaryResponse_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *AllocationSummaryResponse) GetFullResponse() *CompleteAllocationResponse {
	if x, ok := x.GetData().(*AllocationSummaryResponse_FullResponse); ok {
		return x.FullResponse
	}
	return nil
}

type isAllocationSummaryResponse_Data interface {
	isAllocationSummaryResponse_Data()
}

type AllocationSummaryResponse_StatusUpdate struct {
	StatusUpdate *AllocationProgressUpdate `protobuf:"bytes,1,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type AllocationSummaryResponse_FullResponse struct {
	FullResponse *CompleteAllocationResponse `protobuf:"bytes,2,opt,name=full_response,json=fullResponse,proto3,oneof"`
}

func (*AllocationSummaryResponse_StatusUpdate) isAllocationSummaryResponse_Data() {}

func (*AllocationSummaryResponse_FullResponse) isAllocationSummaryResponse_Data() {}

// message for progress updates
type AllocationProgressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PercentComplete float32                `protobuf:"fixed32,1,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
	GraphItem       []*AllocationGraphItem `protobuf:"bytes,2,rep,name=graphItem,proto3" json:"graphItem,omitempty"`
	TotalCost       float64                `protobuf:"fixed64,3,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (x *AllocationProgressUpdate) Reset() {
	*x = AllocationProgressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationProgressUpdate) ProtoMessage() {}

func (x *AllocationProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationProgressUpdate.ProtoReflect.Descriptor instead.
func (*AllocationProgressUpdate) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{7}
}

func (x *AllocationProgressUpdate) GetPercentComplete() float32 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *AllocationProgressUpdate) GetGraphItem() []*AllocationGraphItem {
	if x != nil {
		return x.GraphItem
	}
	return nil
}

func (x *AllocationProgressUpdate) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

// message for allocation graph item listing the day and repeated entry of each graph data
type AllocationGraphItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Span:
	//	*AllocationGraphItem_Day
	//	*AllocationGraphItem_Hour
	Span           isAllocationGraphItem_Span `protobuf_oneof:"span"`
	AllocationData []*AllocationData          `protobuf:"bytes,3,rep,name=allocationData,proto3" json:"allocationData,omitempty"`
}

func (x *AllocationGraphItem) Reset() {
	*x = AllocationGraphItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationGraphItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationGraphItem) ProtoMessage() {}

func (x *AllocationGraphItem) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationGraphItem.ProtoReflect.Descriptor instead.
func (*AllocationGraphItem) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{8}
}

func (m *AllocationGraphItem) GetSpan() isAllocationGraphItem_Span {
	if m != nil {
		return m.Span
	}
	return nil
}

func (x *AllocationGraphItem) GetDay() int32 {
	if x, ok := x.GetSpan().(*AllocationGraphItem_Day); ok {
		return x.Day
	}
	return 0
}

func (x *AllocationGraphItem) GetHour() int32 {
	if x, ok := x.GetSpan().(*AllocationGraphItem_Hour); ok {
		return x.Hour
	}
	return 0
}

func (x *AllocationGraphItem) GetAllocationData() []*AllocationData {
	if x != nil {
		return x.AllocationData
	}
	return nil
}

type isAllocationGraphItem_Span interface {
	isAllocationGraphItem_Span()
}

type AllocationGraphItem_Day struct {
	Day int32 `protobuf:"varint,1,opt,name=day,proto3,oneof"`
}

type AllocationGraphItem_Hour struct {
	Hour int32 `protobuf:"varint,2,opt,name=hour,proto3,oneof"`
}

func (*AllocationGraphItem_Day) isAllocationGraphItem_Span() {}

func (*AllocationGraphItem_Hour) isAllocationGraphItem_Span() {}

// message for each day important data of cost and name of each allocation
type AllocationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cost float32 `protobuf:"fixed32,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *AllocationData) Reset() {
	*x = AllocationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationData) ProtoMessage() {}

func (x *AllocationData) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationData.ProtoReflect.Descriptor instead.
func (*AllocationData) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{9}
}

func (x *AllocationData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllocationData) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// message for complete allocation data having repeated allocationSet of summary
type CompleteAllocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocationSet []*AllocationSet `protobuf:"bytes,2,rep,name=allocationSet,proto3" json:"allocationSet,omitempty"`
}

func (x *CompleteAllocationResponse) Reset() {
	*x = CompleteAllocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteAllocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteAllocationResponse) ProtoMessage() {}

func (x *CompleteAllocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteAllocationResponse.ProtoReflect.Descriptor instead.
func (*CompleteAllocationResponse) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{10}
}

func (x *CompleteAllocationResponse) GetAllocationSet() []*AllocationSet {
	if x != nil {
		return x.AllocationSet
	}
	return nil
}

// message for each allocation set consists of allocation items and window the allocation items data belongs to
type AllocationSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocations []*AllocationItem `protobuf:"bytes,1,rep,name=allocations,proto3" json:"allocations,omitempty"`
	Window      *Window           `protobuf:"bytes,2,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *AllocationSet) Reset() {
	*x = AllocationSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationSet) ProtoMessage() {}

func (x *AllocationSet) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationSet.ProtoReflect.Descriptor instead.
func (*AllocationSet) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{11}
}

func (x *AllocationSet) GetAllocations() []*AllocationItem {
	if x != nil {
		return x.Allocations
	}
	return nil
}

func (x *AllocationSet) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

// message for each allocation Item
type AllocationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window                *Window `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CpuCoreRequestAverage float64 `protobuf:"fixed64,3,opt,name=cpuCoreRequestAverage,proto3" json:"cpuCoreRequestAverage,omitempty"`
	CpuCoreUsageAverage   float64 `protobuf:"fixed64,4,opt,name=cpuCoreUsageAverage,proto3" json:"cpuCoreUsageAverage,omitempty"`
	CpuCost               float64 `protobuf:"fixed64,5,opt,name=cpuCost,proto3" json:"cpuCost,omitempty"`
	GpuCost               float64 `protobuf:"fixed64,6,opt,name=gpuCost,proto3" json:"gpuCost,omitempty"`
	NetworkCost           float64 `protobuf:"fixed64,7,opt,name=networkCost,proto3" json:"networkCost,omitempty"`
	LoadBalancerCost      float64 `protobuf:"fixed64,8,opt,name=loadBalancerCost,proto3" json:"loadBalancerCost,omitempty"`
	PvCost                float64 `protobuf:"fixed64,9,opt,name=pvCost,proto3" json:"pvCost,omitempty"`
	RamByteRequestAverage float64 `protobuf:"fixed64,10,opt,name=ramByteRequestAverage,proto3" json:"ramByteRequestAverage,omitempty"`
	RamByteUsageAverage   float64 `protobuf:"fixed64,11,opt,name=ramByteUsageAverage,proto3" json:"ramByteUsageAverage,omitempty"`
	RamCost               float64 `protobuf:"fixed64,12,opt,name=ramCost,proto3" json:"ramCost,omitempty"`
	SharedCost            float64 `protobuf:"fixed64,13,opt,name=sharedCost,proto3" json:"sharedCost,omitempty"`
	ExternalCost          float64 `protobuf:"fixed64,14,opt,name=externalCost,proto3" json:"externalCost,omitempty"`
}

func (x *AllocationItem) Reset() {
	*x = AllocationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allocation_allocationsummary_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationItem) ProtoMessage() {}

func (x *AllocationItem) ProtoReflect() protoreflect.Message {
	mi := &file_allocation_allocationsummary_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationItem.ProtoReflect.Descriptor instead.
func (*AllocationItem) Descriptor() ([]byte, []int) {
	return file_allocation_allocationsummary_proto_rawDescGZIP(), []int{12}
}

func (x *AllocationItem) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *AllocationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllocationItem) GetCpuCoreRequestAverage() float64 {
	if x != nil {
		return x.CpuCoreRequestAverage
	}
	return 0
}

func (x *AllocationItem) GetCpuCoreUsageAverage() float64 {
	if x != nil {
		return x.CpuCoreUsageAverage
	}
	return 0
}

func (x *AllocationItem) GetCpuCost() float64 {
	if x != nil {
		return x.CpuCost
	}
	return 0
}

func (x *AllocationItem) GetGpuCost() float64 {
	if x != nil {
		return x.GpuCost
	}
	return 0
}

func (x *AllocationItem) GetNetworkCost() float64 {
	if x != nil {
		return x.NetworkCost
	}
	return 0
}

func (x *AllocationItem) GetLoadBalancerCost() float64 {
	if x != nil {
		return x.LoadBalancerCost
	}
	return 0
}

func (x *AllocationItem) GetPvCost() float64 {
	if x != nil {
		return x.PvCost
	}
	return 0
}

func (x *AllocationItem) GetRamByteRequestAverage() float64 {
	if x != nil {
		return x.RamByteRequestAverage
	}
	return 0
}

func (x *AllocationItem) GetRamByteUsageAverage() float64 {
	if x != nil {
		return x.RamByteUsageAverage
	}
	return 0
}

func (x *AllocationItem) GetRamCost() float64 {
	if x != nil {
		return x.RamCost
	}
	return 0
}

func (x *AllocationItem) GetSharedCost() float64 {
	if x != nil {
		return x.SharedCost
	}
	return 0
}

func (x *AllocationItem) GetExternalCost() float64 {
	if x != nil {
		return x.ExternalCost
	}
	return 0
}

var File_allocation_allocationsummary_proto protoreflect.FileDescriptor

var file_allocation_allocationsummary_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x03, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x56,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x50,
	0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x64, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0xd0, 0x01, 0x0a,
	0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5d, 0x0a, 0x09, 0x61, 0x62, 0x73, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x09, 0x61, 0x62, 0x73,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22,
	0x70, 0x0a, 0x0e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a,
	0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x59,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x19, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x65, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x38, 0x0a, 0x0e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xbb, 0x04, 0x0a, 0x0e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4d, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x76,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x76, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x6d, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6d,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x2a, 0x78, 0x0a, 0x0d, 0x49, 0x64, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x44, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x03, 0x2a, 0x3a, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x52, 0x45, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x57,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x01, 0x32, 0xc3,
	0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x47, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73,
	0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_allocation_allocationsummary_proto_rawDescOnce sync.Once
	file_allocation_allocationsummary_proto_rawDescData = file_allocation_allocationsummary_proto_rawDesc
)

func file_allocation_allocationsummary_proto_rawDescGZIP() []byte {
	file_allocation_allocationsummary_proto_rawDescOnce.Do(func() {
		file_allocation_allocationsummary_proto_rawDescData = protoimpl.X.CompressGZIP(file_allocation_allocationsummary_proto_rawDescData)
	})
	return file_allocation_allocationsummary_proto_rawDescData
}

var file_allocation_allocationsummary_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_allocation_allocationsummary_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_allocation_allocationsummary_proto_goTypes = []interface{}{
	(IdleSelection)(0),                 // 0: kubecost.service.allocation.allocationsummary.IdleSelection
	(ShareSplit)(0),                    // 1: kubecost.service.allocation.allocationsummary.ShareSplit
	(*AllocationSummaryRequest)(nil),   // 2: kubecost.service.allocation.allocationsummary.AllocationSummaryRequest
	(*Window)(nil),                     // 3: kubecost.service.allocation.allocationsummary.Window
	(*AbsoluteWindow)(nil),             // 4: kubecost.service.allocation.allocationsummary.AbsoluteWindow
	(*RelativeWindow)(nil),             // 5: kubecost.service.allocation.allocationsummary.RelativeWindow
	(*FilterSelection)(nil),            // 6: kubecost.service.allocation.allocationsummary.FilterSelection
	(*SharedSelection)(nil),            // 7: kubecost.service.allocation.allocationsummary.SharedSelection
	(*AllocationSummaryResponse)(nil),  // 8: kubecost.service.allocation.allocationsummary.AllocationSummaryResponse
	(*AllocationProgressUpdate)(nil),   // 9: kubecost.service.allocation.allocationsummary.AllocationProgressUpdate
	(*AllocationGraphItem)(nil),        // 10: kubecost.service.allocation.allocationsummary.AllocationGraphItem
	(*AllocationData)(nil),             // 11: kubecost.service.allocation.allocationsummary.AllocationData
	(*CompleteAllocationResponse)(nil), // 12: kubecost.service.allocation.allocationsummary.CompleteAllocationResponse
	(*AllocationSet)(nil),              // 13: kubecost.service.allocation.allocationsummary.AllocationSet
	(*AllocationItem)(nil),             // 14: kubecost.service.allocation.allocationsummary.AllocationItem
	(*timestamppb.Timestamp)(nil),      // 15: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 16: google.protobuf.Duration
}
var file_allocation_allocationsummary_proto_depIdxs = []int32{
	3,  // 0: kubecost.service.allocation.allocationsummary.AllocationSummaryRequest.window:type_name -> kubecost.service.allocation.allocationsummary.Window
	6,  // 1: kubecost.service.allocation.allocationsummary.AllocationSummaryRequest.filter:type_name -> kubecost.service.allocation.allocationsummary.FilterSelection
	7,  // 2: kubecost.service.allocation.allocationsummary.AllocationSummaryRequest.shared:type_name -> kubecost.service.allocation.allocationsummary.SharedSelection
	0,  // 3: kubecost.service.allocation.allocationsummary.AllocationSummaryRequest.idle:type_name -> kubecost.service.allocation.allocationsummary.IdleSelection
	4,  // 4: kubecost.service.allocation.allocationsummary.Window.absWindow:type_name -> kubecost.service.allocation.allocationsummary.AbsoluteWindow
	5,  // 5: kubecost.service.allocation.allocationsummary.Window.relWindow:type_name -> kubecost.service.allocation.allocationsummary.RelativeWindow
	15, // 6: kubecost.service.allocation.allocationsummary.AbsoluteWindow.start:type_name -> google.protobuf.Timestamp
	15, // 7: kubecost.service.allocation.allocationsummary.AbsoluteWindow.end:type_name -> google.protobuf.Timestamp
	16, // 8: kubecost.service.allocation.allocationsummary.RelativeWindow.timeFrame:type_name -> google.protobuf.Duration
	1,  // 9: kubecost.service.allocation.allocationsummary.SharedSelection.shareSplit:type_name -> kubecost.service.allocation.allocationsummary.ShareSplit
	9,  // 10: kubecost.service.allocation.allocationsummary.AllocationSummaryResponse.status_update:type_name -> kubecost.service.allocation.allocationsummary.AllocationProgressUpdate
	12, // 11: kubecost.service.allocation.allocationsummary.AllocationSummaryResponse.full_response:type_name -> kubecost.service.allocation.allocationsummary.CompleteAllocationResponse
	10, // 12: kubecost.service.allocation.allocationsummary.AllocationProgressUpdate.graphItem:type_name -> kubecost.service.allocation.allocationsummary.AllocationGraphItem
	11, // 13: kubecost.service.allocation.allocationsummary.AllocationGraphItem.allocationData:type_name -> kubecost.service.allocation.allocationsummary.AllocationData
	13, // 14: kubecost.service.allocation.allocationsummary.CompleteAllocationResponse.allocationSet:type_name -> kubecost.service.allocation.allocationsummary.AllocationSet
	14, // 15: kubecost.service.allocation.allocationsummary.AllocationSet.allocations:type_name -> kubecost.service.allocation.allocationsummary.AllocationItem
	3,  // 16: kubecost.service.allocation.allocationsummary.AllocationSet.window:type_name -> kubecost.service.allocation.allocationsummary.Window
	3,  // 17: kubecost.service.allocation.allocationsummary.AllocationItem.window:type_name -> kubecost.service.allocation.allocationsummary.Window
	2,  // 18: kubecost.service.allocation.allocationsummary.AllocationSummary.GetAllocationSummary:input_type -> kubecost.service.allocation.allocationsummary.AllocationSummaryRequest
	8,  // 19: kubecost.service.allocation.allocationsummary.AllocationSummary.GetAllocationSummary:output_type -> kubecost.service.allocation.allocationsummary.AllocationSummaryResponse
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_allocation_allocationsummary_proto_init() }
func file_allocation_allocationsummary_proto_init() {
	if File_allocation_allocationsummary_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_allocation_allocationsummary_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbsoluteWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationProgressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationGraphItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteAllocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allocation_allocationsummary_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_allocation_allocationsummary_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Window_AbsWindow)(nil),
		(*Window_RelWindow)(nil),
	}
	file_allocation_allocationsummary_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AllocationSummaryResponse_StatusUpdate)(nil),
		(*AllocationSummaryResponse_FullResponse)(nil),
	}
	file_allocation_allocationsummary_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AllocationGraphItem_Day)(nil),
		(*AllocationGraphItem_Hour)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_allocation_allocationsummary_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_allocation_allocationsummary_proto_goTypes,
		DependencyIndexes: file_allocation_allocationsummary_proto_depIdxs,
		EnumInfos:         file_allocation_allocationsummary_proto_enumTypes,
		MessageInfos:      file_allocation_allocationsummary_proto_msgTypes,
	}.Build()
	File_allocation_allocationsummary_proto = out.File
	file_allocation_allocationsummary_proto_rawDesc = nil
	file_allocation_allocationsummary_proto_goTypes = nil
	file_allocation_allocationsummary_proto_depIdxs = nil
}
