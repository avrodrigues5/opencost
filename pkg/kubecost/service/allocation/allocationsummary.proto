syntax = "proto3";

package kubecost.service.allocation.allocationsummary;

option go_package = "github.com/opencost/opencost/pkg/kubecost/service/allocation/allocationsummary";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// Allocation Summary Interface exported by the gRPC server.
service AllocationSummary {
    // An RPC for allocation.
    //
    // Obtains the allocation summary for a given window span.
    
    // Obtains the AllocationSummarySets satisfy the AllocationSummaryRequest. 
    // Results are streamed rather than returned at once.
    rpc GetAllocationSummary (AllocationSummaryRequest) returns (stream AllocationSummaryResponse) {}
}

// AllocationSummaryRequest is the request send from client with a specify window
// either absolute window with datetime or relative window with duration
message AllocationSummaryRequest {
    Window window =1;
    repeated string aggregate = 2;
    bool accumulate = 3;
    repeated FilterSelection filter = 4;
    SharedSelection shared = 5;
    IdleSelection idle = 6;
    bool external = 7;
    int32 max_table_items = 8;
}

// Window represents the window for which allocation summary is requested
message Window{
    oneof window{
        AbsoluteWindow abs_window=1;
        RelativeWindow rel_window=2;
    }
}

// Absolute Window represents the absolute window with start and end time
message AbsoluteWindow {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}

// Relative window represents duration for the requested data
message RelativeWindow {
    google.protobuf.Duration time_frame = 1;
}

// Filter Selection represents the filter on which request is on 
message FilterSelection{
    enum FilterType{
        FILTER_TYPE_UNSPECIFIED = 0;
        FILTER_TYPE_CLUSTERS = 1;
        FILTER_TYPE_NODES = 2;
        FILTER_TYPE_NAMESPACES = 3;
        FILTER_TYPE_CONTROLLER_KINDS =4;
        FILTER_TYPE_CONTROLLERS = 5;
        FILTER_TYPE_PODS = 6;
        FILTER_TYPE_ANNOTATIONS = 7;
        FILTER_TYPE_LABELS = 8;
        FILTER_TYPE_SERVICES = 9;
    }
    FilterType type=1;
    repeated string value = 2;
}

// Different selection of idle from the User Interface 
enum IdleSelection {
    IDLE_COST_HIDE = 0;
    IDLE_COST_SEPERATE = 1;
    IDLE_COST_SHARE_BY_CLUSTER = 2;
    IDLE_COST_SHARE_BY_NODE = 3;
}

// Different shared selection available for the user on the User Interface
message SharedSelection {
    bool share_tenancy_costs = 1;
    string share_namespaces= 2;
    string share_labels = 3;
    double share_cost = 4;
    ShareSplit share_split = 5;
}

// Enum for the shared split which can either be weighted or even
enum ShareSplit {
    SHARESPLIT_WEIGHTED = 0;
    SHARESPLIT_EVEN = 1;
}

// message for the allocationsummary response can either be partial response with each graphdata
// or complete allocation response having all the details
message AllocationSummaryResponse {
    oneof data{
        AllocationSummaryProgressUpdate status_update = 1;
        CompleteAllocationSummaryResponse full_response = 2;
    }
}

// message for progress updates
message AllocationSummaryProgressUpdate {
    float percent_complete = 1;
    repeated AllocationSummaryGraphItem graph_items= 2;
    double total_cost = 3; 
}
 
// message for allocation graph item listing the day and repeated entry of each graph data
message AllocationSummaryGraphItem {
    oneof span{
        int32 day =1;
        int32 hour =2;
    }
    repeated AllocationSummaryPerDayData allocation_summary_data = 3; 
}

// message for each day important data of cost and name of each allocation
message AllocationSummaryPerDayData {
    string name = 1;
    double cost = 2;
}
 
// message for complete allocation data having repeated allocationSet of summary
message CompleteAllocationSummaryResponse {
    repeated AllocationSummarySet allocation_summary_sets = 2;
}
   
// message for each allocation set consists of allocation items and window the allocation items data belongs to
message AllocationSummarySet {
    repeated SummaryTableItem summary_items = 1;
    Window window =2;
}

// message for each allocation summary Item 
message SummaryTableItem {
    Window window =1;
    string name = 2;
    double cpu_cost = 3;
    double gpu_cost = 4;
    double ram_cost = 5;
    double pv_cost = 6;
    double network_cost = 7;
    double loadBalancer_cost = 8;
    double shared_cost = 9;
    double external_cost = 10; 
    float average_cpu_utilization =11;
    double total_cost = 12; 
}